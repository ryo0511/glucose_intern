{"ast":null,"code":"var _jsxFileName = \"/Users/RYO/Documents/Glucose/osero/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  let stoneColor;\n\n  switch (props.value) {\n    case 1:\n      stoneColor = 'black-stone';\n      break;\n\n    case -1:\n      stoneColor = 'white-stone';\n      break;\n\n    case 2:\n      stoneColor = 'can-put';\n      break;\n\n    default:\n      stoneColor = 'no-stone';\n      break;\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: stoneColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }));\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: boardInit(),\n      xIsNext: false\n    };\n  }\n\n  canPut(i, j, stoneColor) {\n    if (this.state.squares[i][j] !== 0 && this.state.squares[i][j] !== 2) {\n      return false;\n    }\n\n    let squares = this.state.squares;\n    let isUserStone = false;\n    let reversedFlag = false;\n    let reversedLineCount = 0;\n    const directionList = [[-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]];\n\n    for (const direction of directionList) {\n      let x = j;\n      let y = i;\n      isUserStone = false;\n      reversedFlag = false;\n\n      while (true) {\n        x += direction[0];\n        y += direction[1];\n\n        if (x < 0 || 7 < x || y < 0 || 7 < y) {\n          break;\n        }\n\n        if (squares[y][x] === 0 || squares[y][x] === 2) {\n          break;\n        }\n\n        if (squares[y][x] === stoneColor) {\n          isUserStone = true;\n          break;\n        }\n\n        reversedFlag = true;\n      }\n\n      if (!reversedFlag || !isUserStone) {} else {\n        reversedLineCount += 1;\n      }\n    }\n\n    if (reversedLineCount > 0) {\n      squares[i][j] = 2;\n      return true;\n    } else {\n      squares[i][j] = 0;\n      return false;\n    }\n  }\n\n  reverseEightLine(i, j, stoneColor) {\n    if (this.state.squares[i][j] !== 2) {\n      return false;\n    }\n\n    let squares = JSON.parse(JSON.stringify(this.state.squares));\n    let isUserStone = false;\n    let reversedFlag = false;\n    let reversedLineCount = 0;\n    const directionList = [[-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]];\n\n    for (const direction of directionList) {\n      const squaresBackUp = JSON.parse(JSON.stringify(squares));\n      let x = j;\n      let y = i;\n      isUserStone = false;\n      reversedFlag = false;\n\n      while (true) {\n        x += direction[0];\n        y += direction[1];\n\n        if (x < 0 || 7 < x || y < 0 || 7 < y) {\n          break;\n        }\n\n        if (squares[y][x] === 0 || squares[y][x] === 2) {\n          break;\n        }\n\n        if (squares[y][x] === stoneColor) {\n          isUserStone = true;\n          break;\n        }\n\n        squares[y][x] = stoneColor;\n        reversedFlag = true;\n      }\n\n      if (!reversedFlag || !isUserStone) {\n        squares = squaresBackUp;\n      } else {\n        reversedLineCount += 1;\n      }\n    }\n\n    if (reversedLineCount > 0) {\n      squares[i][j] = stoneColor;\n      return squares;\n    }\n\n    return false;\n  }\n\n  handleClick(i, j) {\n    const stoneColor = this.state.xIsNext ? 1 : -1;\n    const newSquares = this.reverseEightLine(i, j, stoneColor);\n\n    if (!newSquares) {\n      return;\n    }\n\n    this.setState({\n      squares: newSquares,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  renderSquare(i, j) {\n    const stoneColor = this.state.xIsNext ? 1 : -1;\n    this.canPut(i, j, stoneColor);\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.state.squares[i][j],\n      onClick: () => this.handleClick(i, j),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 12\n      }\n    });\n  }\n\n  pass() {\n    this.setState({\n      xIsNext: !this.state.xIsNext\n    });\n    return;\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = winner;\n    } else {\n      status = 'Next Player: ' + (this.state.xIsNext ? '黒' : '白');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }, status), [0, 1, 2, 3, 4, 5, 6, 7].map(i => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }, [0, 1, 2, 3, 4, 5, 6, 7].map(j => this.renderSquare(i, j)))), /*#__PURE__*/React.createElement(PassButton, {\n      stoneCounts: () => countStone(this.state.squares),\n      onClick: () => this.pass(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nfunction PassButton(props) {\n  const [black, white, nextPlayerCanPut] = props.stoneCounts();\n\n  if (black + white === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 12\n      }\n    });\n  }\n\n  console.log(\"nextPlayerCanPut\", nextPlayerCanPut);\n\n  if (nextPlayerCanPut === 0) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 7\n      }\n    }, \" PASS \");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 10\n    }\n  });\n}\n\nclass Game extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: boardInit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));\n\nfunction countStone(squares) {\n  let black = 0;\n  let white = 0;\n  let canPutPlace = 0;\n\n  for (const values of squares) {\n    for (const value of values) {\n      if (value === 1) {\n        black++;\n      } else if (value === -1) {\n        white++;\n      } else if (value === 2) {\n        canPutPlace++;\n      }\n    }\n  }\n\n  return [black, white, canPutPlace];\n}\n\nfunction boardInit() {\n  return [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, -1, 0, 0, 0], [0, 0, 0, -1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]];\n}\n\nfunction calculateWinner(squares) {\n  const [black, white] = countStone(squares);\n  const stoneCount = black + white;\n\n  if (stoneCount === 64 || black === 0 || white === 0) {\n    if (black < white) {\n      return '白の勝利！';\n    }\n\n    if (black === white) {\n      return '引き分け';\n    }\n\n    return '黒の勝利！';\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/RYO/Documents/Glucose/osero/src/index.tsx"],"names":["React","ReactDOM","Square","props","stoneColor","value","onClick","Board","Component","constructor","state","squares","boardInit","xIsNext","canPut","i","j","isUserStone","reversedFlag","reversedLineCount","directionList","direction","x","y","reverseEightLine","JSON","parse","stringify","squaresBackUp","handleClick","newSquares","setState","renderSquare","pass","render","winner","calculateWinner","status","map","countStone","PassButton","black","white","nextPlayerCanPut","stoneCounts","console","log","Game","document","getElementById","canPutPlace","values","stoneCount"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\ninterface SquarePropsInterface {\n  value: number\n  onClick: () => void\n}\n\nfunction Square(props: SquarePropsInterface) {\n  let stoneColor: string\n  switch (props.value) {\n    case 1:\n      stoneColor = 'black-stone'\n      break\n    case -1:\n      stoneColor = 'white-stone'\n      break\n    case 2:\n      stoneColor = 'can-put'\n      break\n    default:\n      stoneColor = 'no-stone'\n      break\n  }\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      <div className={stoneColor} />\n    </button>\n  )\n}\n\ninterface BoardPropsInterface {\n  squares: Array<number>[]\n}\n\ninterface BoardStateInterface {\n  squares: Array<number>[]\n  xIsNext: boolean\n}\n\nclass Board extends React.Component<BoardPropsInterface, BoardStateInterface> {\n  constructor(props: BoardPropsInterface) {\n    super(props)\n    this.state = {\n      squares: boardInit(),\n      xIsNext: false,\n    }\n  }\n\n  canPut(i: number, j: number, stoneColor: number) {\n    if (this.state.squares[i][j] !== 0 && this.state.squares[i][j] !== 2) {\n      return false\n    }\n    let squares = this.state.squares\n    let isUserStone = false\n    let reversedFlag = false\n    let reversedLineCount = 0\n    const directionList = [\n      [-1, -1],\n      [0, -1],\n      [1, -1],\n      [-1, 0],\n      [1, 0],\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n    ]\n    for (const direction of directionList) {\n      let x = j\n      let y = i\n      isUserStone = false\n      reversedFlag = false\n      while (true) {\n        x += direction[0]\n        y += direction[1]\n        if (x < 0 || 7 < x || y < 0 || 7 < y) {\n          break\n        }\n        if (squares[y][x] === 0 || squares[y][x] === 2) {\n          break\n        }\n        if (squares[y][x] === stoneColor) {\n          isUserStone = true\n          break\n        }\n        reversedFlag = true\n      }\n      if (!reversedFlag || !isUserStone) {\n      } else {\n        reversedLineCount += 1\n      }\n    }\n    if (reversedLineCount > 0) {\n      squares[i][j] = 2\n      return true\n    } else {\n      squares[i][j] = 0\n      return false\n    }\n  }\n\n  reverseEightLine(i: number, j: number, stoneColor: number) {\n    if (this.state.squares[i][j] !== 2) {\n      return false\n    }\n    let squares = JSON.parse(JSON.stringify(this.state.squares))\n    let isUserStone = false\n    let reversedFlag = false\n    let reversedLineCount = 0\n    const directionList = [\n      [-1, -1],\n      [0, -1],\n      [1, -1],\n      [-1, 0],\n      [1, 0],\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n    ]\n    for (const direction of directionList) {\n      const squaresBackUp = JSON.parse(JSON.stringify(squares))\n      let x = j\n      let y = i\n      isUserStone = false\n      reversedFlag = false\n      while (true) {\n        x += direction[0]\n        y += direction[1]\n        if (x < 0 || 7 < x || y < 0 || 7 < y) {\n          break\n        }\n        if (squares[y][x] === 0 || squares[y][x] === 2) {\n          break\n        }\n        if (squares[y][x] === stoneColor) {\n          isUserStone = true\n          break\n        }\n        squares[y][x] = stoneColor\n        reversedFlag = true\n      }\n      if (!reversedFlag || !isUserStone) {\n        squares = squaresBackUp\n      } else {\n        reversedLineCount += 1\n      }\n    }\n    if (reversedLineCount > 0) {\n      squares[i][j] = stoneColor\n      return squares\n    }\n    return false\n  }\n\n  handleClick(i: number, j: number) {\n    const stoneColor = this.state.xIsNext ? 1 : -1\n    const newSquares = this.reverseEightLine(i, j, stoneColor)\n    if (!newSquares) {\n      return\n    }\n    this.setState({\n      squares: newSquares,\n      xIsNext: !this.state.xIsNext,\n    })\n  }\n\n  renderSquare(i: number, j: number) {\n    const stoneColor = this.state.xIsNext ? 1 : -1\n    this.canPut(i, j, stoneColor)\n    return <Square value={this.state.squares[i][j]} onClick={() => this.handleClick(i, j)} />\n  }\n\n  pass() {\n    this.setState({\n      xIsNext: !this.state.xIsNext,\n    })\n    return\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares)\n    let status: string\n    if (winner) {\n      status = winner\n    } else {\n      status = 'Next Player: ' + (this.state.xIsNext ? '黒' : '白')\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        {[0, 1, 2, 3, 4, 5, 6, 7].map((i) => (\n          <div className=\"board-row\">{[0, 1, 2, 3, 4, 5, 6, 7].map((j) => this.renderSquare(i, j))}</div>\n        ))}\n        <PassButton\n          stoneCounts={() => countStone(this.state.squares)}\n          onClick={() =>this.pass()}\n        />\n      </div>\n    )\n  }\n}\n\ninterface PassButtonPropsInterface {\n  stoneCounts: () => Array<number>\n  onClick: () => void\n}\n\nfunction PassButton(props: PassButtonPropsInterface) {\n  const [black, white, nextPlayerCanPut] = props.stoneCounts()\n  if (black + white === 0) {\n    return <div></div>\n  }\n  console.log(\"nextPlayerCanPut\", nextPlayerCanPut)\n  if (nextPlayerCanPut === 0) {\n    return (\n      <button onClick={props.onClick}> PASS </button>\n    )\n  }\n  return <div></div>\n\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={boardInit()} />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    )\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById('root'))\n\nfunction countStone(squares: Array<number>[]) {\n  let black: number = 0\n  let white: number = 0\n  let canPutPlace: number = 0\n\n  for (const values of squares) {\n    for (const value of values) {\n      if (value === 1) {\n        black++\n      } else if (value === -1) {\n        white++\n      } else if (value === 2) {\n        canPutPlace++\n      }\n    }\n  }\n\n  return [black, white, canPutPlace]\n}\n\nfunction boardInit() {\n  return [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 1, -1, 0, 0, 0],\n    [0, 0, 0, -1, 1, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n  ]\n}\n\nfunction calculateWinner(squares: Array<number>[]) {\n  const [black, white] = countStone(squares)\n  const stoneCount = black + white\n  if (stoneCount === 64 || black === 0 || white === 0) {\n    if (black < white) {\n      return '白の勝利！'\n    }\n    if (black === white) {\n      return '引き分け'\n    }\n    return '黒の勝利！'\n  }\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}